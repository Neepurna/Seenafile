rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() { return request.auth != null; }
    function isOwner(userId) { return request.auth.uid == userId; }
    
    // Example for user document access
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSignedIn() && isOwner(userId);
      
      // Movies subcollection
      match /movies/{movieId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && isOwner(userId);
      }
      
      // Movie interactions subcollection with owner validation
      match /movieInteractions/{movieId} {
        allow read, write: if isSignedIn() && isOwner(userId) && request.resource.data.keys().hasAll(['movieId', 'status']);
      }
    }
    
    // Matches collection
    match /matches/{matchId} {
      allow read: if isSignedIn() && (resource.data.user1Id == request.auth.uid || resource.data.user2Id == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.keys().hasAll(['user1Id', 'user2Id', 'score']);
      allow update, delete: if false;
    }
    
    // Chats collection with participant validation
    match /chats/{chatId} {
      allow read, write: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      
      match /messages/{messageId} {
        allow read, write: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      }
    }
    
    // Shared reviews (public read access)
    match /sharedReviews/{reviewId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }
  }
}

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() { 
      return request.auth != null; 
    }
    
    function isOwner(userId) { 
      return request.auth.uid == userId; 
    }
    
    function isValidReview() {
      return request.resource.data.keys().hasAll(['movieId', 'movieTitle', 'rating', 'review']) 
        && request.resource.data.rating is number
        && request.resource.data.rating >= 1 
        && request.resource.data.rating <= 5;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();  // Allow any signed-in user to read user profiles
      allow create, update: if isSignedIn() && isOwner(userId);
      allow delete: if false; // Prevent deletion
      
      // User's private movie lists
      match /movies/{movieId} {
        allow read: if isSignedIn();  // Allow any signed-in user to read movies
        allow write: if isSignedIn() && isOwner(userId);
      }
      
      // User's private reviews
      match /reviews/{reviewId} {
        allow read: if isSignedIn() && isOwner(userId);
        allow create, update: if isSignedIn() && isOwner(userId) && isValidReview();
        allow delete: if isSignedIn() && isOwner(userId);
      }
    }

    // Chats collection
    match /chats/{chatId} {
      allow read, write: if isSignedIn() && (
        chatId.matches('^' + request.auth.uid + '_.*$') ||
        chatId.matches('^.*_' + request.auth.uid + '$')
      );
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isSignedIn() && (
          resource.data.senderId == request.auth.uid ||
          get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid])
        );
        allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;
        allow update, delete: if false;
      }
    }
    
    // Public reviews
    match /sharedReviews/{reviewId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && isValidReview();
      allow update, delete: if false;
    }
    
    // Matches collection
    match /matches/{matchId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && (
        request.resource.data.userId == request.auth.uid
      );
      allow update: if isSignedIn() && (
        resource.data.userId == request.auth.uid ||
        resource.data.targetId == request.auth.uid
      );
      allow delete: if false;
    }
    
    // Helper function for potential matches
    function isPotentialMatch(userId) {
      // Adjust this function based on your app's logic for potential matches
      // For simplicity, we'll assume any authenticated user can be a potential match
      return isSignedIn();
    }
  }
}

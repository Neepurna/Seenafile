rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function hasRequiredReviewFields() {
      let data = request.resource.data;
      return data.keys().hasAll([
        'movieId',
        'movieTitle',
        'rating',
        'review',
        'createdAt',
        'category'
      ]);
    }

    // New function for minimal movie fields (no rating/review needed)
    function hasMinimumMovieFields() {
      let data = request.resource.data;
      return data.keys().hasAll([
        'movieId',
        'movieTitle',
        'createdAt',
        'category'
      ]);
    }

    function isChatParticipant(chatData) {
      return request.auth.uid in chatData.participants;
    }

    // Global movies collection
    match /movies/{movieId} {
      allow read, write: if isSignedIn();  // Temporarily relaxed for debugging
    }
    
    // User specific data - Simplified rules
    match /users/{userId} {
      // Base read/write rules
      allow read: if true; // Allow reading user data even when signing out
      allow write: if isSignedIn() && isOwner(userId);
      
      // Allow status updates
      allow update: if request.resource.data.diff(resource.data).affectedKeys()
        .hasAny(['lastActive', 'status', 'presence', 'photoURL', 'coverURL', 'bio', 'updatedAt', 'hasSeenTutorial']);

      // Movies subcollection
      match /movies/{movieId} {
        allow read: if true; // Allow reading movies even during sign out
        allow write: if isSignedIn() && isOwner(userId);
      }

      // Reviews subcollection
      match /reviews/{reviewId} {
        allow read: if true; // Allow reading reviews even during sign out
        allow write: if isSignedIn() && isOwner(userId);
      }
    }

    // Shared reviews collection
    match /sharedReviews/{reviewId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() 
        && request.resource.data.userId == request.auth.uid 
        && hasRequiredReviewFields();
      allow update, delete: if isSignedIn() 
        && resource.data.userId == request.auth.uid;
    }

    // Chat specific rules
    match /chats/{chatId} {
      allow read: if isSignedIn() &&
        request.auth.uid in resource.data.participants;
      
      allow create: if isSignedIn() && 
        request.auth.uid in request.resource.data.participants &&
        request.resource.data.keys().hasAll(['encryptionKey']);
      
      allow update: if isSignedIn() && 
        request.auth.uid in resource.data.participants &&
        (!('lastMessage' in request.resource.data) || request.resource.data.lastMessage == null) &&
        (!('lastMessageEncrypted' in request.resource.data) || request.resource.data.lastMessageEncrypted is string) &&
        (!('lastMessageIv' in request.resource.data) || request.resource.data.lastMessageIv is string);

      match /messages/{messageId} {
        allow read: if isSignedIn() && exists(/databases/$(database)/documents/chats/$(chatId)) &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        allow create: if isSignedIn() && 
          exists(/databases/$(database)/documents/chats/$(chatId)) &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          request.resource.data.keys().hasAll(['encryptedText', 'iv', 'senderId', 'timestamp', 'read']);
        
        allow update: if isSignedIn() &&
          exists(/databases/$(database)/documents/chats/$(chatId)) &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
      }
    }

    // Add user-match mapping collection
    match /userMatches/{userId} {
      allow read: if isSignedIn() && request.auth.uid == userId;
      allow write: if isSignedIn() && request.auth.uid == userId;
      
      match /matches/{matchId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
      }
    }

    // Update matches collection rules
    match /matches/{matchId} {
      allow read: if isSignedIn() && 
        (request.auth.uid in resource.data.participants ||
         request.auth.uid == resource.data.user1Id ||
         request.auth.uid == resource.data.user2Id);
      
      allow create: if isSignedIn() &&
        (request.auth.uid == request.resource.data.user1Id ||
         request.auth.uid == request.resource.data.user2Id);
      
      allow update: if isSignedIn() &&
        (request.auth.uid == resource.data.user1Id ||
         request.auth.uid == resource.data.user2Id);
    }

    // Add this new rule for user-specific chat data
    match /users/{userId}/chats/{chatId} {
      allow read, write: if isSignedIn() && (request.auth.uid == userId);
    }

    // Add new rule for handling disconnection/cleanup
    match /users/{userId}/status {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isOwner(userId);
    }

    match /users/{userId}/presence {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isOwner(userId);
    }

    // Status collection for user presence
    match /status/{userId} {
      allow read: if true;
      allow write: if isSignedIn() && isOwner(userId);
    }
  }
}
